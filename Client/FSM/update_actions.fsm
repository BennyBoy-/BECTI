/*%FSM<COMPILE "D:\Tools\FSM Editor Personal Edition\scriptedFSM.cfg, update_actions.fsm">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Start_FSM",0,250,-275.000000,-100.000000,-175.000000,-50.000000,0.000000,"Start FSM"};
item1[] = {"Cycle",4,218,-100.000000,-100.000000,0.000000,-50.000000,1.000000,"Cycle"};
item2[] = {"Update_Actions",2,4346,-100.000000,-225.000000,0.000000,-175.000000,0.000000,"Update" \n "Actions"};
item3[] = {"End_FSM",1,250,50.000000,-325.000000,150.000000,-275.000000,0.000000,"End FSM"};
item4[] = {"Terminate",4,218,50.000000,-225.000000,150.000000,-175.000000,0.000000,"Terminate"};
link0[] = {0,1};
link1[] = {1,2};
link2[] = {2,1};
link3[] = {2,4};
link4[] = {4,3};
globals[] = {25.000000,1,0,0,0,640,480,1,133,6316128,1,-457.107819,165.700150,575.219543,-317.919952,417,910,1};
window[] = {2,-1,-1,-1,-1,885,-1816,-561,104,3,435};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "update_actions.fsm";
  class States
  {
    /*%FSM<STATE "Start_FSM">*/
    class Start_FSM
    {
      name = "Start_FSM";
      init = /*%FSM<STATEINIT""">*/"_ncycle = 0;" \n
       "" \n
       "" \n
       "_commander_last = grpNull;" \n
       "_commander_update = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "Cycle">*/
        class Cycle
        {
          priority = 1.000000;
          to="Update_Actions";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!CTI_GameOver && time > _ncycle "/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "Update_Actions">*/
    class Update_Actions
    {
      name = "Update_Actions";
      init = /*%FSM<STATEINIT""">*/"_ncycle = time + 2.5;" \n
       "" \n
       "_hq = (CTI_P_SideJoined) call CTI_CO_FNC_GetSideHQ;" \n
       "" \n
       "//--- Commander checks" \n
       "_commander = (CTI_P_SideJoined) call CTI_CO_FNC_GetSideCommanderTeam;" \n
       "if !(_commander isEqualTo _commander_last) then {" \n
       "	_commander_last = _commander;" \n
       "	//--- If the player is not the commander, we remove the hq actions if necessary (otherwise we add it)" \n
       "	if !(_commander isEqualTo group player) then {" \n
       "		if (alive _hq) then {" \n
       "			for '_i' from 0 to 3 do {_hq removeAction _i};" \n
       "		};" \n
       "		if !(isNil ""CTI_HQ_BuildAction"") then {player removeAction CTI_HQ_BuildAction};" \n
       "	} else {" \n
       "		CTI_HQ_BuildAction = player addAction [""<t color='#a5c4ff'>MENU: Construction (HQ)</t>"", ""Client\Actions\Action_CoinBuild.sqf"", ""HQ"", 93, false, true, """", ""_target isEqualTo player && CTI_Base_HQInRange""];" \n
       "		(_hq) spawn (missionNamespace getVariable ""CTI_PVF_CLT_AddHQActions"");" \n
       "	};" \n
       "};" \n
       "" \n
       "//--- Generic base checks" \n
       "_structures = (CTI_P_SideJoined) call CTI_CO_FNC_GetSideStructures;" \n
       "" \n
       "CTI_Base_HQInRange = [false, true] select (alive _hq && _hq distance player < CTI_BASE_CONSTRUCTION_RANGE);" \n
       "CTI_Base_ControlCenterInRange = [false, true] select !(isNull ([CTI_CONTROLCENTER, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_CC] call CTI_CO_FNC_GetClosestStructure));" \n
       "" \n
       "CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE = [CTI_BASE_PURCHASE_UNITS_RANGE, CTI_BASE_PURCHASE_UNITS_RANGE_CC] select (CTI_Base_ControlCenterInRange);" \n
       "" \n
       "_barracks = [CTI_BARRACKS, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure;" \n
       "CTI_Base_BarracksInRange = [false, true] select !(isNull _barracks);" \n
       "CTI_Base_GearInRange = [false, true] select (_barracks distance player < CTI_BASE_GEAR_RANGE);" \n
       "CTI_Base_GearInRange_Mobile = [false, true] select (count([player, CTI_SPECIAL_AMMOTRUCK, CTI_SERVICE_AMMO_TRUCK_RANGE] call CTI_CO_FNC_GetNearestSpecialVehicles) > 0);" \n
       "" \n
       "CTI_Base_LightInRange = [false, true] select !(isNull ([CTI_LIGHT, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "CTI_Base_HeavyInRange = [false, true] select !(isNull ([CTI_HEAVY, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "CTI_Base_AirInRange = [false, true] select !(isNull ([CTI_AIR, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "CTI_Base_AmmoInRange = [false, true] select !(isNull ([CTI_AMMO, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "CTI_Base_RepairInRange = [false, true] select !(isNull ([CTI_REPAIR, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "CTI_Base_NavalInRange = [false, true] select !(isNull ([CTI_NAVAL, player, _structures, CTI_BASE_PURCHASE_UNITS_RANGE_EFFECTIVE] call CTI_CO_FNC_GetClosestStructure));" \n
       "" \n
       "//--- Depot check" \n
       "_depot = [player, CTI_P_SideID] call CTI_CO_FNC_GetClosestDepot;" \n
       "if !(isNull _depot) then {" \n
       "	_available = false;" \n
       "	switch (CTI_TOWNS_DEPOT_ACCESS_MODE) do {" \n
       "		case 1: {if ([_depot getVariable ""cti_depot"", CTI_P_SideID] call CTI_CO_FNC_HasAllCamps) then {_available = true}}; //--- Check if the camps belong to the player's side" \n
       "		default {_available = true}; //--- Default, The depot belongs to the player's side" \n
       "	};" \n
       "	" \n
       "	CTI_Base_DepotInRange = _available;" \n
       "} else {" \n
       "	CTI_Base_DepotInRange = false;" \n
       "};" \n
       "CTI_Base_GearInRange_Depot = CTI_Base_DepotInRange;" \n
       "" \n
       "//--- FOB Check" \n
       "_in_range = false;" \n
       "if (CTI_BASE_FOB_MAX > 0) then {" \n
       "	_nearest = [vehicle player, CTI_P_SideLogic getVariable [""cti_fobs"",[]]] call CTI_CO_FNC_GetClosestEntity;" \n
       "	if (_nearest distance vehicle player <= CTI_BASE_GEAR_FOB_RANGE) then {_in_range = true};" \n
       "};" \n
       "CTI_Base_GearInRange_FOB = _in_range;" \n
       "" \n
       "//--- Track the player's gear" \n
       "if (CTI_GEAR_RESPAWN_WITH_LAST > 0) then {" \n
       "	if (alive player && !CTI_P_Respawning) then {CTI_P_CurrentGear = (player) call CTI_CO_FNC_GetUnitLoadout};" \n
       "};" \n
       "" \n
       "//--- Actions" \n
       "if (""ToolKit"" in items player && player isEqualTo vehicle player) then {" \n
       "	if (count(vehicle player nearEntities [[""Car"",""Air"",""Tank"",""Ship""], 10]) > 0) then {" \n
       "		if !(CTI_P_ActionLockPick) then {CTI_P_ActionLockPick = true};" \n
       "		if !(CTI_P_ActionRepair) then {CTI_P_ActionRepair = true};" \n
       "	} else {" \n
       "		if (CTI_P_ActionLockPick) then {CTI_P_ActionLockPick = false};" \n
       "		if (CTI_P_ActionRepair) then {CTI_P_ActionRepair = false};" \n
       "	};" \n
       "} else {" \n
       "	if (CTI_P_ActionLockPick) then {CTI_P_ActionLockPick = false};" \n
       "	if (CTI_P_ActionRepair) then {CTI_P_ActionRepair = false};" \n
       "};" \n
       "" \n
       "" \n
       "/*//debug" \n
       "CTI_Base_BarracksInRange = true;" \n
       "CTI_Base_LightInRange = true;" \n
       "CTI_Base_HeavyInRange = true;" \n
       "CTI_Base_AirInRange = true;" \n
       "CTI_Base_AmmoInRange = true;" \n
       "CTI_Base_RepairInRange = true;*/"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "Cycle">*/
        class Cycle
        {
          priority = 1.000000;
          to="Update_Actions";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!CTI_GameOver && time > _ncycle "/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "Terminate">*/
        class Terminate
        {
          priority = 0.000000;
          to="End_FSM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"CTI_GameOver"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "End_FSM">*/
    class End_FSM
    {
      name = "End_FSM";
      init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
  };
  initState="Start_FSM";
  finalStates[] =
  {
    "End_FSM",
  };
};
/*%FSM</COMPILE>*/